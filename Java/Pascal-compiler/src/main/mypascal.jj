/**
 * This is a JavaCC file
 */
 
 /*
 @TODO:
 bugs: return to -global-
 	error in first line (-1);	

tokens:		


grammar:	 **** xor shl shr

			**type a=record               end;
	**function name(parametr):return type;
 					{local declaration}
 					begin
 					{function}
 					end;
 
syntaxik:
				const a=12;
			**case exp of
 					val:
 					val:
 					[else default_stat]
 					end;

//error in var skipped to fullstop;


symantik: 


hierarchy of declaration
				//destroy table symbole of  a procedure or a bloc when finnish
				//test affectation an operations


 
 
QUAD:
 					
 				
 					
 				
 					
 					
 
 
 
 
 
 
 
 
 */
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
options {
  JDK_VERSION = "1.5";
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK=2;
  OTHER_AMBIGUITY_CHECK=1;
  STATIC = false;
  IGNORE_CASE = true;
}

PARSER_BEGIN(pascal)
package main;


import java.io.*;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JMenuBar;
import javax.swing.JScrollBar;
import javax.swing.JTextArea;
import java.awt.event. * ;
import javax.swing.JDialog;
import javax.swing.JFrame;

import main.ui;
import main.Table_symboles;
import main.Table_Quad;
import main.LexTests;
import main.Symbole;


import java.util.ArrayList;
import java.util.List;



public class pascal {
	
	 //check methodes 
 String Log=new String();
 
 Table_symboles Tsym=new Table_symboles();
 Table_Quad Tquad=new Table_Quad();	
 
 int err_x=-1,err_y=-1;
 int cptERR=0;
 int chk_meth=1;


	
void  errorSkipTo(int kind,ParseException e)
{
	
if(e.currentToken.beginLine!=err_x && e.currentToken.beginColumn!=err_y)
{	
   cptERR++;
   JoinInHtml(e);
   System.err.println(e.toString());//skip it after
}
err_x=e.currentToken.beginLine;
err_y=e.currentToken.beginColumn;

Token t;
int index=0;
boolean excepted=false;



for(int x : e.expectedTokenSequences[0]) if (x==kind)  excepted=true;


if (!excepted )
{
do
{index++;
        t=getToken(index);

}
while (t.kind!=kind && t.kind!=END  && t.kind!=SEMICOLON  && t.kind!=EOF  ) ;
if (t.kind==kind) for(int i=0;i<index;i++) getNextToken();

}
}



public void JoinInHtml(ParseException pe)
{

Log+="<font size=\"+1\" color=\"red\"><br>error #<b>"+(cptERR)+"</b>:</font><br>";
Log+="encountree <b>&lt;"+pe.currentToken.next.image+"&gt;</b>";
Log+="dans ligne <b>'"+pe.currentToken.next.beginLine+"'</b>";
Log+="et colomne <b>'"+pe.currentToken.next.beginColumn+"'</b><br>exeptee:";
for(int[] S : pe.expectedTokenSequences)
for(int s :S) {Log+="&lt;";
											for(char c :pe.tokenImage[s].toCharArray()) {switch(c)
																			{case '<':Log+="&lt;";break;
																			case '>':Log+="&gt;";break;
																			default :Log+=c;
																			
																			
																			};
																			};
										Log+="&gt;";
											};

Log+=";</pre><br>";

}




 
public static void main(String args[])

{
	 /************* INTERFACE *************************/
   myinterface mainframe=new myinterface();;
   // pascal parser = new pascal(System.in/*new FileInputStream("../Pascal-compiler/src/main/tests/t")*/);

}
  public  String ParseIt() throws ParseException {
  
  		String LogGeneral=new String();
   		String Result=new String("<h3><font color=\"green\"><u>Analyse Result:</u></font></b><br>");
     	LexTests.ReInit();
     	
     	
     	
     	cptERR=0;
     	
        Log+="<h3><font color=\"green\"><u>Analyse Syntaxic</u></font></b>";
     	
          	
      System.out.println("Reading from textfield...");

      try {
        this.programme();
         LexTests.FinalTest();
         if (cptERR+Tsym.cptERR+LexTests.cptERR==0) Result+="<font color=\"blue\">compiling completed with success..</font>";
         else{
         		 Result+="<font color=\"red\">compiling completed with<b> <font size=\"+2\" color=\"blue\">"+(cptERR+Tsym.cptERR+LexTests.cptERR)+"</font></b> Errors </font>";
         		 Result+="(lexical="+LexTests.cptERR+" - syntaxic="+cptERR+" -symantic="+Tsym.cptERR+")";
         		}
                 		
       
      } 
      catch (ParseException pe) {
        System.out.println(pe.getMessage());
        cptERR++;
      Log+="<font size=\"+1\" color=\"red\"><br>error#<b>"+cptERR+"</b>:</font><pre><b>detail:</b>"+pe.getMessage()+"</pre>";
    
      
        
      
      }
       catch (Exception e) {
    
        System.out.println(e.getMessage());
        Tsym.cptERR++;
       Tsym.JoinInHtml(e);
      
      
      }
    
       catch (Error e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        LogGeneral="<h3><font color=\"red\"><br>problem dans l'analyse:\n</font></h3>"+e.getMessage();
    		
    	
      };
     	
    	LogGeneral="<html><head><title>compiling...<title></head><body><h1><font color=\"red\">Compiling reportï¿½    <br></font></h1>";
     	LogGeneral+=LexTests.HighLight+"</td></tr></table><br>";//close the last case
        LogGeneral+=LexTests.Log;
        LogGeneral+=Log;
        LogGeneral+=Tsym.Log;
        LogGeneral+=Result;
        
      	LogGeneral+="<br>"+this.Tsym.ToHTML()+"<br>"+this.Tquad.ToHTML();
      	LogGeneral+="<font size=\"-2\" ><center><a href=\"mailto:assem.ch@gmail.com\">by Assem.Ch</a></center></body></html>";
      
      return LogGeneral;
     
   
     
  
  }
  }
  



PARSER_END(pascal)

SKIP:{
  " "   {LexTests.HighLight+="&nbsp;";}	
  | "\r" 
  | "\t" {LexTests.HighLight+="";}	
  | "\n" {LexTests.HighLight+="</td></tr><tr><td><font color=\"Maroon\"><b>"+(++LexTests.nbLine)+"</b></font></td><td>";}
  
}

SPECIAL_TOKEN:/* COMMENTS */
{
  <MULTI_LINE_COMMENT:"{"(~["*"])*"}"> {LexTests.ToHighLight(image.toString(),"grey","+0","i");}
  | <MULTI:"(""*"(~["*"])*"*"")">  {LexTests.ToHighLight(image.toString(),"grey","+0","i");}
}

TOKEN:/* OPERATORS */
{
  <PLUS:"+"> {LexTests.ToHighLight("+","#990066","+0","");}	 
  | <MINUS:"-"> {LexTests.ToHighLight("-","#990066","+0","");}	 
  | <MULTIPLY:"*"> {LexTests.ToHighLight("*","#990066","+0","");}	 
  | <DIVIDE:"/"> {LexTests.ToHighLight("/","#990066","+0","");}	 
  | <ASSIGNOP:":="> {LexTests.ToHighLight(":=","#990066","+0","");}	 
 
}
TOKEN:{
<LT:"<">      {LexTests.ToHighLight("&lt;","#990066","+0","");}	 
  |<LTE:"<="> {LexTests.ToHighLight("&lt;=","#990066","+0","");}
  |<GT:">"> {LexTests.ToHighLight("&gt;","#990066","+0","");}
  | <GTE:">="> {LexTests.ToHighLight("&gt;=","#990066","+0","");}
  | <NE:"<>"> {LexTests.ToHighLight("&lt;&gt;","#990066","+0","");}
  | <E:"=">  {LexTests.ToHighLight("=","#990066","+0","");}
}




TOKEN:{

  <PROGRAM:"program">  {LexTests.ToHighLight("program","blue","+0","b");}
  | <VAR:"var"> 	 {LexTests.ToHighLight("var","blue","+0","b");}
  | <INTEGER:"integer"> {LexTests.ToHighLight("integer","blue","+0","b");}
  | <REAL:"real">  {LexTests.ToHighLight("real","blue","+0","b");}
  | <CHAR:"char">  {LexTests.ToHighLight("char","blue","+0","b");}
  | <BOOLEAN:"boolean"> {LexTests.ToHighLight("boolean","blue","+0","b");}
  | <STRING:"string"> {LexTests.ToHighLight("string","blue","+0","b");}
  | <FUNCTION:"function"> {LexTests.ToHighLight("function","blue","+0","b");}
  | <PROCEDURE:"procedure"> {LexTests.ToHighLight("procedure","blue","+0","b");}
  | <BEGIN:"begin"> {LexTests.Empiler("BEGIN");LexTests.ToHighLight("begin","blue","+0","b");}
  | <END:"end">  {LexTests.Depiler("BEGIN");LexTests.ToHighLight("end","blue","+0","b");}
  | <ARRAY:"array">  {LexTests.ToHighLight("array","blue","+0","b");}
  | <OF:"of">   {LexTests.ToHighLight("of","blue","+0","b");}
  | <DOTDOT:"..">  {LexTests.ToHighLight("..","#990066","+0","b");}
  | <IF:"if">  {LexTests.ToHighLight("if","blue","+0","b");}
  | <THEN:"then">   {LexTests.ToHighLight("then","blue","+0","b");}
  | <ELSE:"else"> {LexTests.ToHighLight("else","blue","+0","b");}
  | <WHILE:"while">  {LexTests.ToHighLight("while","blue","+0","b");}
  | <DO:"do">  {LexTests.ToHighLight("do","blue","+0","b");}
  | <FOR:"for"> {LexTests.ToHighLight("for","blue","+0","b");}
  | <TO:"to">  {LexTests.ToHighLight("to","blue","+0","b");}
  | <DOWNTO:"downto">  {LexTests.ToHighLight("downto","blue","+0","b");}
  | <REPEAT:"repeat"> {LexTests.ToHighLight("repeat","blue","+0","b");}
  | <UNTIL:"until">  {LexTests.ToHighLight("until","blue","+0","b");}
  | <AND:"and"> {LexTests.ToHighLight("and","blue","+0","b");}
  | <OR:"or">  {LexTests.ToHighLight("or","blue","+0","b");}
  | <XOR:"xor">  {LexTests.ToHighLight("xor","blue","+0","b");}
  | <NOT:"not">  {LexTests.ToHighLight("not","blue","+0","b");}
  | <SHL:"shl">  {LexTests.ToHighLight("shl","blue","+0","b");}
  | <SHR:"shr">  {LexTests.ToHighLight("shr","blue","+0","b");}
  | <DIV:"div">  {LexTests.ToHighLight("div","blue","+0","b");}
  | <MOD:"mod">  {LexTests.ToHighLight("mod","blue","+0","b");}
  | <READ:"read"> {LexTests.ToHighLight("read","blue","+0","b");}
  | <WRITE:"write">  {LexTests.ToHighLight("write","blue","+0","b");}
  | <LABEL:"label">  {LexTests.ToHighLight("label","blue","+0","b");}
  | <GOTO:"goto">  {LexTests.ToHighLight("goto","blue","+0","b");}
  | <CASE:"case">  {LexTests.Empiler("BEGIN");LexTests.ToHighLight("case","blue","+0","b");}
  | <RECORD:"record">  {LexTests.ToHighLight("record","blue","+0","b");}
  | <TYPE:"type">  {LexTests.ToHighLight("type","blue","+0","b");}
  | <CONST:"const">  {LexTests.ToHighLight("const","blue","+0","b");}
  | <UNIT:"unit"> {LexTests.ToHighLight("unit","blue","+0","b");}
  | <USES:"uses"> {LexTests.ToHighLight("uses","blue","+0","b");}
  | <BREAK:"break"> {LexTests.ToHighLight("break","blue","+0","b");}
  | <CONTINUE:"continue"> {LexTests.ToHighLight("continue","blue","+0","b");}
  | <IS:"is"> {LexTests.ToHighLight("is","blue","+0","b");}
  | <IN:"in"> {LexTests.ToHighLight("in","blue","+0","b");}
  | <WITH:"with"> {LexTests.ToHighLight("with","blue","+0","b");}
  //| <ASM:"asm"> {LexTests.ToHighLight("asm","blue","+0","b");}
}
TOKEN:{
  <IDENT:<LETTER>(<LETTER>  | <DIGIT> | "_")*> {LexTests.HighLight+=image.toString();}	
  | <LETTER:["a"-"z", "A"-"Z"]> 
  | <CARACTERE:"'"<LETTER>"'">  {LexTests.ToHighLight(image.toString(),"red","+0","");}
  | <NATURAL:(<DIGIT>)+>  {LexTests.ToHighLight(image.toString(),"green","+0","");}
  | <DIGIT:["0"-"9"]>  {LexTests.ToHighLight(image.toString(),"green","+0","");}
  | <REEL:(<DIGIT>)+/*(*/"."(<DIGIT>)+/*)?*/ /*["e", "E"](["+", "-"])?(["0"-"9"])+*/> {LexTests.ToHighLight(image.toString(),"green","+0","");}
  | <BOOLEEN:"true" | "false" > {LexTests.ToHighLight(image.toString(),"green","+0","");}
  | <CHAINE:"'"(<LETTER>)+"'"> {LexTests.ToHighLight(image.toString(),"red","+0","");}
  | <SEMICOLON:(";")+>  {LexTests.ToHighLight(";","#990066","+0","");}
  | <FULLSTOP:".">   {LexTests.ToHighLight(".","#990066","+0","");}
  | <COLON:":">       {LexTests.ToHighLight(":","#990066","+0","");}
  | <COMMA:",">        {LexTests.ToHighLight(",","#990066","+0","");}   
  | <BRACKETOPEN:"(">  {LexTests.Empiler("(");LexTests.ToHighLight("(","#990066","+0","");}
  | <BRACKETCLOSE:")">   {LexTests.Depiler("(");LexTests.ToHighLight(")","#990066","+0","");}
  | <SQRBRACKETOPEN:"["> {LexTests.Empiler("[");LexTests.ToHighLight("[","#990066","+0","");}
  | <SQRBRACKETCLOSE:"]"> {LexTests.Depiler("[");LexTests.ToHighLight("]","#990066","+0","");}

}
//skip unautorised
SKIP:
{
  <Unautorised:(~["_"])> {LexTests.declareUnAutorised(image.toString());}		
}

/* **************************************************** */
/* **************************************************** */
/* **************************************************** */
int programme() : { Token t=null;int saveLine=-1;}
{

try
{	
 <PROGRAM> {saveLine=LexTests.nbLine;} t=<IDENT>  <SEMICOLON> 
}
catch (ParseException e)
	{
  errorSkipTo(SEMICOLON,e);
	}
	
	
	try
	{
	{if (t!=null) Tsym.declare(t.image,"program","","",saveLine);/*Tsym.setOwnerCourant(t.image); */}
	}
  catch (Exception e) {
    
         Tsym.cptERR++;
       Tsym.JoinInHtml(e);
      
      
      }
      
try

{
	bloc()<FULLSTOP> 
}
catch (ParseException e)
	{
  errorSkipTo(FULLSTOP,e);
	}
	
 {Tsym.FinalTest();return 0; }
	
	
}


void bloc():
{
}
{
	  
    
    
     

 partie_declarative() 



try
{
  <BEGIN>   (LOOKAHEAD(2) serial_ennoce())* (enonce())?<END> 
	}catch (ParseException e)
	{
	    errorSkipTo(END,e);
	}
}


void partie_declarative():
{
Token t=null;
String x="";
String y;	
}
{
///(<USES> (serial_dcl_uses())* serial_dcl_uses() )?  
(<LABEL> ( serial_dcllbl())+ )?  
(<CONST> t=<IDENT> (<COLON> x=type())? <E> y=constante() <SEMICOLON>

{try
{
{	if (t!=null) Tsym.declare(t.image,"constant",x,y,LexTests.nbLine); }

	}
  catch (Exception e) {
    
         Tsym.cptERR++;
       Tsym.JoinInHtml(e);
      
      
      }}	 )* 
(<VAR> ( serial_dclvar())+ )? 
( serial_dclproc())*



}




void serial_dclvar():
{
}
{
try	
{
dclvar()<SEMICOLON>	
}catch (ParseException e)
	{
	    errorSkipTo(SEMICOLON,e);
	}		
}

void serial_dcllbl():
{
}
{
try	
{
dcllbl()<SEMICOLON>	
}catch (ParseException e)
	{
	    errorSkipTo(SEMICOLON,e);
	}		
}




void serial_dclproc():
{
}
{
try	
{
dclproc() <SEMICOLON>	
}catch (ParseException e)
	{
	    errorSkipTo(SEMICOLON,e);
	}		
}


void dclvar() :
{
	Token ident0=null;
	String type0;
	int saveLine=-1;
	String param0=Tsym.Tpar.NewParam();	
}
{
	
(LOOKAHEAD(2) serial_ident(param0))*

try
{
ident0=<IDENT> {saveLine=LexTests.nbLine;} <COLON> 
}catch (ParseException e)
	{
	    errorSkipTo(COLON,e);
	}
	


type0=type()
{
try
{
{	if (ident0!=null) {
						if (type0!="array") Tsym.declare(ident0.image,"variable",type0,"",saveLine); 
						else Tsym.declare(ident0.image,"variable",type0,Tsym.StupidEscape,saveLine); 
						}
   }
	}
  catch (Exception e) {
    
         Tsym.cptERR++;
       Tsym.JoinInHtml(e);
      
      
      }
      Tsym.Tpar.UpdateParam(param0,type0);
}    


}

void serial_ident(String type0):
{
Token ident0=null;
int saveLine=-1;

}
{
try
{	
ident0=<IDENT> {saveLine=LexTests.nbLine;}  <COMMA> 	
}catch (ParseException e)
	{
	    errorSkipTo(COMMA,e);
	}
{	
try	{if (ident0!=null)	Tsym.declare(ident0.image,"variable",type0,"",saveLine);}
catch (Exception e) {Tsym.cptERR++; Tsym.JoinInHtml(e);}}
      
}

String type():
{
Token t=null;
String s;
int taille=0;
}
{

(t=<ARRAY> taille=dclarray_index()  <OF>)? s=type_final()
{if (t!=null) {
			Tquad.modifyQuad(Tquad.getCourant()-1,4,s);
			for(int i=0;i<taille;i++)
			{
			Tquad.genereQuad("null","","","");
			}
				}  }

{
	if (t!=null) return "array"; else  return s;
	
	}
}

int dclarray_index():{
Token t=null,s=null;
int taille=0;
}
{

try
{	
 <SQRBRACKETOPEN> t=<NATURAL> <DOTDOT> s=<NATURAL> <SQRBRACKETCLOSE>

	
}catch (ParseException e)
	{
	    errorSkipTo(SQRBRACKETCLOSE,e);
	}	

	 {int i0=Integer.valueOf(t.image);
	  int i1=Integer.valueOf(s.image);
	  if (i0>i1) {
 					Tsym.cptERR++; 
					Tsym.JoinInHtml(new Exception("premier index <b>"+i0+"</b> de tablau  superiuer a le deuxieme <b>"+i1+"</b> a la ligne "+LexTests.nbLine));
 					}
 	  else taille=(i1-i0+1);
 					
 
 }
{	Tsym.StupidEscape=""+Tquad.genereQuad("array",""+i0,""+i1,"");
	
	return taille;}
}
void dcllbl() :
{
	Token ident0=null;
	String type0;
	int saveLine=-1;	
}
{
	
(LOOKAHEAD(2) serial_ident_lbl())* ident0=<IDENT>  {	
							try	{Tsym.declare(ident0.image,"label","",Tsym.Tpar.NewParam(),LexTests.nbLine);}
							catch (Exception e) {Tsym.cptERR++; Tsym.JoinInHtml(e);}}
      
}



void serial_ident_lbl():
{
Token ident0=null;
int saveLine=-1;
}
{
try
{	
ident0=<IDENT> {saveLine=LexTests.nbLine;}  <COMMA> 	
}catch (ParseException e)
	{
	    errorSkipTo(COMMA,e);
	}
{	
try	{if (ident0!=null)	Tsym.declare(ident0.image,"label","","",saveLine);}
catch (Exception e) {Tsym.cptERR++; Tsym.JoinInHtml(e);}}
      
}

void dclproc():{
Token t=null;
int SaveAdr=-1;
String SaveOwner="";
}
{
	

try
{	
<PROCEDURE> t=<IDENT>  <SEMICOLON> {SaveAdr=Tquad.genereQuad("jmp","","",""); }
}catch (ParseException e)
	{
	    errorSkipTo(SEMICOLON,e);
	}
	
{try	{if (t!=null) {Tsym.declare(t.image,"procedure","",""+SaveAdr,LexTests.nbLine);
						SaveOwner=Tsym.getOwnerCourant();
						Tsym.setOwnerCourant(t.image);} }
catch (Exception e) {Tsym.cptERR++;Tsym.JoinInHtml(e);}}
      

try
{
 bloc() {String adr=Tquad.NewTemp();
 	Tquad.genereQuad("pop","","",adr);
 	Tquad.genereQuad("call","","",adr);
 	if (SaveAdr!=-1) Tquad.modifyQuad(SaveAdr,4,""+ Tquad.getCourant()); }
		{Tsym.setOwnerCourant(SaveOwner);}
}catch (ParseException e){errorSkipTo(SEMICOLON,e);}

}


void enonce_compose():
{
}
{
 
try
{
<BEGIN> (LOOKAHEAD(2) serial_ennoce())* (enonce())?<END> 
}
catch (ParseException e){ errorSkipTo(END,e);}


}

void serial_ennoce():{}
{
try
{
enonce() <SEMICOLON>	
}catch (ParseException e){ errorSkipTo(SEMICOLON,e);}
	
}

void enonce():
{
	Token t=null;
}
{
	

/*affectation() | appel_procedure() */

t=<IDENT> X(t.image)  | entree() | sortie() | enonce_compose() 
| enonce_conditionnel() | enonce_iteratif() | goto_label() 

{/*try
{if (t!=null) Tsym.search(t.image,true);}
 catch (Exception e) {cptERR++;JoinInHtml(e);}
 */     
}

}


void X(String t):{

String s;
}
{
	
 affectation(t){
 	
 				try
				{if (t!=null) if(Tsym.search(t,true)) Tsym.verify_type(t,"variable") ;}
 			catch (Exception e) {Tsym.cptERR++;Tsym.JoinInHtml(e);}
      
				}
 
 
 
 
 
 
  | <COLON> {try
				{
					if (t!=null) if(Tsym.search(t,true)) Tsym.verify_type(t,"label") ;
						
				String adr=Tsym.getVal(t);
             if (adr.charAt(0)=='$') {Tsym.setVal(t,""+Tquad.getCourant());
             							Tquad.UpdateParam(adr,""+Tquad.getCourant());}
             else Tsym.THROW("l'etiquette de "+t+" est deja  definie"+""); 
             }
 			catch (Exception e) {Tsym.cptERR++;Tsym.JoinInHtml(e);};
      
			
             
			}
 
  
  
  
  
  
  
  
  
  
  |{Tquad.genereQuad("push","","",""+(Tquad.getCourant()+2));
  	Tquad.genereQuad("call","","",Tsym.getVal(t));
  	
  	try
				{if (t!=null) if(Tsym.search(t,true)) Tsym.verify_type(t,"procedure") ;}
 			catch (Exception e) {Tsym.cptERR++;Tsym.JoinInHtml(e);}
      
				}
				
				


 }	
	





void affectation(String t):
{
String s=null;	
String u=null;
}
{

(s=array_index(t))? <ASSIGNOP> u=expression() {if (s==null) s=t;Tquad.genereQuad("mov",u,"",s);}

}

String array_index(String x):
{
String t=null;
String base=Tsym.getVal(x);
}
{

try
{
<SQRBRACKETOPEN>  t=expression() <SQRBRACKETCLOSE>
}catch (ParseException e)
	{
	    errorSkipTo(SQRBRACKETCLOSE,e);
	}

{ 	
	
	if (t!=null) return ""+t+"("+base+")";
			   else return "";
}
}

String variable():
{
	Token t;
    String x="";
}
{
t=<IDENT> (x=array_index(t.image))? 

{
try
{Tsym.search(t.image,true);}
  catch (Exception e) { Tsym.cptERR++;  Tsym.JoinInHtml(e);}
if (x!="") return x;else return t.image;

}

}



String expression():
{
String x,y=null,z=null;	
}
{
x=expression_simple() (LOOKAHEAD(2) y=oprel() z=expression_simple())?
	
{if (z==null ) {return x;}
else {
		Tquad.genereQuad("cmp",x,z,"");
		String inst="";
	  
	    if (y=="=") inst="je"; 
	     if (y=="<") inst="jl"; 
	     if (y==">") inst="jg"; 
	     if (y=="<=") inst="jle"; 
	     if (y==">=") inst="jge"; 
	     if (y=="<>") inst="jne"; 
	    
	    Tquad.genereQuad(inst,"","",""+(Tquad.getCourant()+2));	
	    String tmp=Tquad.NewTemp();
	    Tquad.genereQuad("mov","0","",tmp);	
	    Tquad.genereQuad("jmp","","",""+(Tquad.getCourant()+2));		
	    Tquad.genereQuad("mov","1","",tmp);
	    return tmp;  		
	    	
	    }
	
	


		}	
	
}



String oprel():
{
	Token t;
}
{

(t=<LT>|t=<LTE>|t=<GT>| t=<GTE>| t=<NE> |t= <E>)
{return t.image;}
}


String expression_simple():
{
	String w=null,x;
	 String tmp;
}
{

(w=signe())? x=terme(){tmp=x;
						if (w!=null) {if (w=="-")  { tmp=Tquad.NewTemp();
								 Tquad.genereQuad("neg",x,"",tmp);
		
									};
					};


					}  


(LOOKAHEAD(2) tmp=serial_opadd(tmp))*
{   
	    return tmp;

			}				
					
	
	
}



String serial_opadd(String s):
{
	String y,z;
}
{

	
y=opadd() z=terme() 	
		
		{
	
        String inst=y;
	    if (y=="+") inst="add";
	    if (y=="-") inst="sub";
	 
	    String tmp=Tquad.NewTemp();
	    Tquad.genereQuad(inst,s,z,tmp);	
	    
	    return tmp;
		}
}

String opadd():
{
Token t;	
}
{
(t=<PLUS> | t=<MINUS> | t=<OR> | t=<XOR>)

{return t.image;}

}



String signe():
{
Token t;	
}
{
(t=<PLUS> | t=<MINUS> )

{return t.image;}

}



String terme():
{
	String x;
	String tmp;	
}
{

x=facteur() {tmp=x;}


(LOOKAHEAD(2) tmp=serial_opmult(tmp) )*

{
   return tmp;	
}

	
	
	
}




String serial_opmult(String s):

{
String y,z;

}
{
y=opmult() z=facteur()	

{

	    String inst=y;
	    if (y=="*") inst="mul";
	    if (y=="/") inst="divqq";
	    
	   
	    
	    String tmp =Tquad.NewTemp();
	    Tquad.genereQuad(inst,s,z,tmp);	
	    
	 
			return tmp;
			}		
	

}

String opmult():
{
	Token t;
}
{

 
 ( t=<MULTIPLY>  | t=<DIVIDE> | t=<DIV> |t=<AND> |t=<MOD> )
 {return t.image;}
  
}



String facteur():
{
	String x;
}
{
x=constante() {return x;}
| x=variable() {return x;}
| <NOT> x=facteur() {   String tmp =Tquad.NewTemp();
	   				 Tquad.genereQuad("not",x,"",tmp);	
	    
	   					 return tmp;}
| try {
	<BRACKETOPEN> x=expression() <BRACKETCLOSE> {return x;}
												
	}catch (ParseException e)	{errorSkipTo(BRACKETCLOSE,e);}
	
}



String constante():
{
Token t=null;	
}
{
(t=<NATURAL> | t=<CARACTERE> |  t=<BOOLEEN> | t=<REEL>  | t=<CHAINE>)
{return t.image;}

}



String goto_label():
{
	Token t;
}
{
 
 <GOTO> t=<IDENT> 
 {
 try
{
if(Tsym.search(t.image,true)) Tsym.verify_type(t.image,"label") ;

	}
  catch (Exception e) {
    
         Tsym.cptERR++;
      Tsym.JoinInHtml(e);
      
      
      }
    
    Tquad.genereQuad("jmp","","",Tsym.getVal(t.image));
      
  return t.image;    
 }

}



void entree():
{
	String x;
}
{

<READ> 
try
{
<BRACKETOPEN>
(LOOKAHEAD(2) serial_variable())* x=variable() {Tquad.genereQuad("read","","",x);}
<BRACKETCLOSE>
}
catch (ParseException e)
												{
												    errorSkipTo(BRACKETCLOSE,e);
												}
}





void serial_variable():{
	String x;
	}
{
try
{	
x=variable() {Tquad.genereQuad("read","","",x);} <COMMA> 	
}
catch (ParseException e)
{
errorSkipTo(COMMA,e);
}
	
}


void sortie():
{
	String x;
}
{
<WRITE>  
try
{<BRACKETOPEN>
 (LOOKAHEAD(2) serial_expression() )* x=expression() {Tquad.genereQuad("write","","",x);}
 <BRACKETCLOSE> 
}
catch (ParseException e)
{
errorSkipTo(BRACKETCLOSE,e);
}

}

void serial_expression():{
String x;
}
{
try
{	
x=expression(){Tquad.genereQuad("write","","",x);} <COMMA>	
}
catch (ParseException e)
{
errorSkipTo(COMMA,e);
}
	
}




void enonce_conditionnel():
{
}
{
case_of() |	 if_then_else()
}



void case_of():
{

String adr=Tsym.Tpar.NewParam();
String var;	
}
{
	try
	{
<CASE> var=expression() <OF>
  (LOOKAHEAD(2) serial_case_statment(adr,var))* 
  case_statment(adr,var)
  
  (<SEMICOLON> <ELSE>   enonce() (LOOKAHEAD(2) <SEMICOLON>)?  )?
<END> {Tsym.Tpar.UpdateParam(adr,""+Tquad.getCourant());}
}
catch (ParseException e)
{
errorSkipTo(END,e);
}
}


void serial_case_statment(String adr,String var):
{
}
{
	try {
case_statment(adr,var)  <SEMICOLON>

}
catch (ParseException e)
{
errorSkipTo(SEMICOLON,e);
}
}

void case_statment(String adr,String var):
{
	String x="_ERR_";
	int SaveAdr=-1;
}
{
try {
x=constante() <COLON> 
	}
catch (ParseException e)
{
errorSkipTo(SEMICOLON,e);
}

			{ 	
					String tmp =Tquad.NewTemp();
						Tquad.genereQuad("cmp",var,x,tmp);
					     SaveAdr=Tquad.genereQuad("jnz","","","");
							}
	
	
	enonce() 	{Tquad.genereQuad("jmp","","",""+adr);
				Tquad.modifyQuad(SaveAdr,4,""+Tquad.getCourant());}
				 
}





void if_then_else():
{
	
	int SaveAdr,SaveAdr2;
}
{
<IF> expression() {SaveAdr=Tquad.genereQuad("jz","","","");}

<THEN> enonce() {Tquad.modifyQuad(SaveAdr,4,""+Tquad.getCourant());}

(LOOKAHEAD(2) <ELSE> {SaveAdr2=Tquad.genereQuad("jmp","","","");
					  Tquad.modifyQuad(SaveAdr,4,""+Tquad.getCourant());	}  

enonce() {Tquad.modifyQuad(SaveAdr2,4,""+Tquad.getCourant());}  )?

}






void enonce_iteratif():
{
}
{
tq() | repeter() | pour()


}


void tq():{
int SaveAdr,SaveAdr2;
}
{

<WHILE> {SaveAdr=Tquad.getCourant();}

expression() {SaveAdr2=Tquad.genereQuad("jz","","","");}

 <DO> enonce() {Tquad.genereQuad("jmp","","",""+(SaveAdr));
 				Tquad.modifyQuad(SaveAdr2,4,""+Tquad.getCourant());
  				}
	
}

void repeter():{
int SaveAdr;
}
{
<REPEAT> {SaveAdr=Tquad.getCourant();}
 enonce() <UNTIL> expression()  {Tquad.genereQuad("jnz","","",""+SaveAdr);}
	
}

void pour():{
Token t,s=null;
String x,y,z;
int SaveAdr,SaveAdr2;
}
{
<FOR> t=<IDENT>  affectation(t.image) 
(s=<TO> | s=<DOWNTO>) {SaveAdr=Tquad.getCourant();}
 x=expression() {Tquad.genereQuad("cmp",t.image,x,"");
				SaveAdr2=Tquad.genereQuad("jz","","","");}						


 <DO> enonce()  {if (s.image=="to") Tquad.genereQuad("add",t.image,"1",t.image);
 				 else Tquad.genereQuad("sub",t.image,"1",t.image);//if downto
				  Tquad.genereQuad("jmp","","",""+SaveAdr);
				  Tquad.modifyQuad(SaveAdr2,4,""+Tquad.getCourant());
				  }	

 { try{Tsym.search(t.image,true);}  catch (Exception e) {Tsym.cptERR++; Tsym.JoinInHtml(e);}

 }
}



String type_final():
{
	Token t;
	

}
{
(t=<INTEGER> | t=<REAL> | t=<BOOLEAN> | t=<CHAR> | t=<STRING>) // add IDENT AFTER and TEST its existance

{	
	return t.image;
	}
}


